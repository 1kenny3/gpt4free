import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import BOT_TOKEN
from g4f.client import Client
from dataclasses import dataclass
from typing import Dict
import g4f
from g4f.Provider import FreeGpt
from aiogram.enums import ChatAction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ g4f
client = Client()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_prompts: Dict[int, str] = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ARTA
@dataclass
class ArtaModel:
    id: str
    name: str
    description: str
    emoji: str

ARTA_MODELS = [
    ArtaModel("cinematic_art", "–ö–∏–Ω–æ", "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å", "üé•"),
    ArtaModel("anime", "–ê–Ω–∏–º–µ", "–°—Ç–∏–ª—å –∞–Ω–∏–º–µ –∏ —è–ø–æ–Ω—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏", "üáØüáµ"),
    ArtaModel("realistic", "–†–µ–∞–ª–∏–∑–º", "–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üì∏"),
    ArtaModel("creative", "–ö—Ä–µ–∞—Ç–∏–≤", "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã", "üé®"),
    ArtaModel("manga", "–ú–∞–Ω–≥–∞", "–°—Ç–∏–ª—å —è–ø–æ–Ω—Å–∫–æ–π –º–∞–Ω–≥–∏", "üìò"),
    ArtaModel("disney", "–î–∏—Å–Ω–µ–π", "–°—Ç–∏–ª—å Disney –∞–Ω–∏–º–∞—Ü–∏–∏", "üè∞"),
    ArtaModel("enhance", "–£–ª—É—á—à–µ–Ω–∏–µ", "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üîç"),
    ArtaModel("pixel_art", "–ü–∏–∫—Å–µ–ª–∏", "–†–µ—Ç—Ä–æ –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞", "üñºÔ∏è"),
    ArtaModel("flux", "Flux", "Flux Image Generation", "üì∏"),
    ArtaModel("medieval", "Medieval", "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("vincent_van_gogh", "Van Gogh", "–°—Ç–∏–ª—å –í–∞–Ω –ì–æ–≥–∞", "üì∏"),
    ArtaModel("f_dev", "F-Dev", "F-Dev Generation", "üì∏"),
    ArtaModel("low_poly", "Low Poly", "–ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("dreamshaper_xl", "Dreamshaper XL", "Dreamshaper XL Generation", "üì∏"),
    ArtaModel("anima_pencil_xl", "Anima Pencil", "–ö–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π —Å—Ç–∏–ª—å Anima", "üì∏"),
    ArtaModel("biomech", "Biomech", "–ë–∏–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("trash_polka", "Trash Polka", "–°—Ç–∏–ª—å Trash Polka", "üì∏"),
    ArtaModel("no_style", "No Style", "–ë–µ–∑ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", "üì∏"),
    ArtaModel("cheyenne_xl", "Cheyenne XL", "Cheyenne XL Generation", "üì∏"),
    ArtaModel("chicano", "Chicano", "–°—Ç–∏–ª—å Chicano", "üì∏"),
    ArtaModel("embroidery_tattoo", "Embroidery", "–í—ã—à–∏–≤–∫–∞ —Ç–∞—Ç—É", "üì∏"),
    ArtaModel("red_and_black", "Red & Black", "–ö—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("fantasy_art", "Fantasy Art", "–§—ç–Ω—Ç–µ–∑–∏ –∞—Ä—Ç", "üì∏"),
    ArtaModel("watercolor", "Watercolor", "–ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("dotwork", "Dotwork", "–¢–æ—á–µ—á–Ω—ã–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("old_school_colored", "Old School Color", "–û–ª–¥—Å–∫—É–ª —Ü–≤–µ—Ç–Ω–æ–π", "üì∏"),
    ArtaModel("realistic_tattoo", "Realistic Tattoo", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–∞—Ç—É", "üì∏"),
    ArtaModel("japanese_2", "Japanese", "–Ø–ø–æ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("realistic_stock_xl", "Stock XL", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–æ–∫", "üì∏"),
    ArtaModel("f_pro", "F-Pro", "F-Pro Generation", "üì∏"),
    ArtaModel("reanimated", "Reanimated", "Reanimated Generation", "üì∏"),
    ArtaModel("katayama_mix_xl", "Katayama Mix", "Katayama Mix XL", "üì∏"),
    ArtaModel("sdxl_l", "SDXL-L", "SDXL-L Generation", "üì∏"),
    ArtaModel("cor_epica_xl", "Cor Epica", "Cor Epica XL", "üì∏"),
    ArtaModel("anime_tattoo", "Anime Tattoo", "–ê–Ω–∏–º–µ —Ç–∞—Ç—É", "üì∏"),
    ArtaModel("new_school", "New School", "–ù—å—é —Å–∫—É–ª", "üì∏"),
    ArtaModel("death_metal", "Death Metal", "–î—ç—Ç-–º–µ—Ç–∞–ª —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("old_school", "Old School", "–û–ª–¥—Å–∫—É–ª", "üì∏"),
    ArtaModel("juggernaut_xl", "Juggernaut", "Juggernaut XL", "üì∏"),
    ArtaModel("photographic", "Photographic", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "üì∏"),
    ArtaModel("sdxl_1_0", "SDXL 1.0", "SDXL 1.0 Generation", "üì∏"),
    ArtaModel("graffiti", "Graffiti", "–ì—Ä–∞—Ñ—Ñ–∏—Ç–∏", "üì∏"),
    ArtaModel("mini_tattoo", "Mini Tattoo", "–ú–∏–Ω–∏ —Ç–∞—Ç—É", "üì∏"),
    ArtaModel("surrealism", "Surrealism", "–°—é—Ä—Ä–µ–∞–ª–∏–∑–º", "üì∏"),
    ArtaModel("neo_traditional", "Neo Traditional", "–ù–µ–æ —Ç—Ä–∞–¥–∏—à–Ω–ª", "üì∏"),
    ArtaModel("on_limbs_black", "On Limbs Black", "On Limbs Black —Å—Ç–∏–ª—å", "üì∏"),
    ArtaModel("yamers_realistic_xl", "Yamers Realistic", "Yamers Realistic XL", "üì∏")
]

MODELS_DICT = {model.id: model for model in ARTA_MODELS}

def get_models_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    buttons = []
    row = []
    for model in ARTA_MODELS:
        row.append(InlineKeyboardButton(
            text=f"{model.emoji} {model.name}",
            callback_data=f"model_{model.id}"
        ))
        if len(row) == 3:  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            buttons.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    buttons.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="model_cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_models_list_keyboard() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –≤—ã–±–æ—Ä–æ–º"""
    buttons = []
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π
    categories = {
        "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ": ["vincent_van_gogh", "watercolor", "fantasy_art", "surrealism"],
        "üì∏ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ": ["realistic", "photographic", "realistic_stock_xl", "yamers_realistic_xl"],
        "üé¨ –ö–∏–Ω–æ –∏ –∞–Ω–∏–º–∞—Ü–∏—è": ["cinematic_art", "disney", "anime", "manga"],
        "üéÆ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ": ["pixel_art", "low_poly", "medieval", "creative"],
        "‚ú® AI Models": ["flux", "f_dev", "f_pro", "dreamshaper_xl", "sdxl_l", "sdxl_1_0"],
        "üíâ –¢–∞—Ç—É —Å—Ç–∏–ª–∏": [
            "biomech", "trash_polka", "chicano", "embroidery_tattoo",
            "dotwork", "old_school", "new_school", "realistic_tattoo",
            "anime_tattoo", "mini_tattoo", "neo_traditional"
        ],
        "üîß –£—Ç–∏–ª–∏—Ç—ã": ["enhance", "no_style"]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, model_ids in categories.items():
        buttons.append([InlineKeyboardButton(
            text=category,
            callback_data=f"category_{category}"  # –î–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        )])
        
        row = []
        for model_id in model_ids:
            model = next((m for m in ARTA_MODELS if m.id == model_id), None)
            if model:
                row.append(InlineKeyboardButton(
                    text=f"{model.emoji} {model.name}",
                    callback_data=f"models_info_{model.id}"
                ))
                if len(row) == 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                    buttons.append(row)
                    row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons.append([InlineKeyboardButton(text="‚ûñ" * 20, callback_data="separator")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
SYSTEM_PROMPT = """–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–±—â–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –¥–≤—É–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
        "1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ /generate\n"
        "2Ô∏è‚É£ –û–±—â–µ–Ω–∏–µ —Å AI - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /generate –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–æ–¥–æ–º\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è\n\n"
        "üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π: /models\n"
        "üÜò –ü–æ–º–æ—â—å: /help"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n\n"
        "2. –û–±—â–µ–Ω–∏–µ —Å AI:\n"
        "   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "   ‚Ä¢ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
        "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: /models"
    )

@dp.message(Command("generate"))
async def generate_prompt(message: Message):
    text = message.text.replace("/generate", "").strip()
    
    if not text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
        return
    
    first_word = text.split()[0].lower()
    selected_model = None
    prompt = text
    
    for model in ARTA_MODELS:
        if first_word in [model.id.lower(), model.name.lower()]:
            selected_model = model
            prompt = " ".join(text.split()[1:])
            break
    
    if selected_model:
        await generate_image(message, selected_model.id, prompt)
    else:
        user_prompts[message.from_user.id] = text
        await message.answer(
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è):",
            reply_markup=get_models_keyboard()
        )

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def process_model_selection(callback_query: CallbackQuery):
    model_id = callback_query.data.replace('model_', '')
    
    if model_id == "cancel":
        user_id = callback_query.from_user.id
        if user_id in user_prompts:
            del user_prompts[user_id]
        await callback_query.message.delete()
        await callback_query.answer("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    model = MODELS_DICT.get(model_id)
    if not model:
        await callback_query.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback_query.answer(f"üé® {model.description}")
    
    prompt = user_prompts.get(callback_query.from_user.id)
    if not prompt:
        await callback_query.message.answer("üö´ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        await callback_query.answer()
        return
    
    await callback_query.message.delete()
    await generate_image(callback_query.message, model_id, prompt)
    
    if callback_query.from_user.id in user_prompts:
        del user_prompts[callback_query.from_user.id]

async def generate_image(message: Message, model_id: str, prompt: str):
    try:
        processing_msg = await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ {MODELS_DICT[model_id].name}...")
        
        response = await asyncio.to_thread(
            client.images.generate,
            model=model_id,
            prompt=prompt,
            response_format="url"
        )
        
        await message.answer_photo(
            photo=response.data[0].url,
            caption=f"üé® –°—Ç–∏–ª—å: {MODELS_DICT[model_id].emoji} {MODELS_DICT[model_id].name}\n‚úçÔ∏è –ó–∞–ø—Ä–æ—Å: {prompt}"
        )
        
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

@dp.message(Command("models"))
async def show_models(message: Message):
    await message.answer(
        "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n"
        "üé® –ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–∏–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/generate [—Å—Ç–∏–ª—å] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /generate anime –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –∫–∞—Ç–∞–Ω–æ–π",
        reply_markup=get_models_list_keyboard()
    )

@dp.callback_query(lambda c: c.data == "separator")
async def process_separator(callback_query: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('models_info_'))
async def model_info_callback(callback_query: CallbackQuery):
    model_id = callback_query.data.replace('models_info_', '')
    model = MODELS_DICT.get(model_id)
    if not model:
        await callback_query.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    text = (
        f"{model.emoji} <b>{model.name}</b> (<code>{model.id}</code>)\n"
        f"{model.description}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ:\n"
        f"/generate {model.id} [–≤–∞—à –∑–∞–ø—Ä–æ—Å]"
    )
    await callback_query.answer()  # –ü–æ–≥–∞—Å–∏—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_models_list_keyboard()
    )

@dp.message()
async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI
    """
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ generate, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if message.text.startswith('/generate'):
        return
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FreeGPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
            response = await asyncio.to_thread(
                g4f.ChatCompletion.create,
                model=None,
                provider=FreeGpt,
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"},
                    {"role": "assistant", "content": "–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": message.text}
                ],
                stream=False
            )
            
            if response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                if any(ord(char) > 127 for char in response):  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã
                    await message.reply(response)
                else:
                    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–æ —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.")
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
                    response = await asyncio.to_thread(
                        g4f.ChatCompletion.create,
                        model=None,
                        provider=FreeGpt,
                        messages=[
                            {"role": "system", "content": SYSTEM_PROMPT},
                            {"role": "user", "content": f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message.text}"}
                        ],
                        stream=False
                    )
                    await message.reply(response if response else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
            else:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                
        except Exception as e:
            logging.error(f"Error getting response from model: {str(e)}")
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logging.error(f"Error in message handler: {str(e)}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 